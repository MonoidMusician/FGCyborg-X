<?xml version="1.0"?>
<PropertyList>

<!--

 Aircraft-specific initialization routines and settings.

 Categories are roughly ranked in order of size; aircraft
 are (sometimes) in the same order as the launcher.

 Sections:
	Bombers!
	Airliners
	Transport
	Regional/commercial turboprops
	Fighter/attack
	Military props
	General aviation
	Trainers/aerobatic jets
	Aerobatic props
	Ultralight/(hang-)gliders
	Historical
	Helicopters
	VTOL (vertical take-off and landing)

-->

<!-- This "executes" the file -->
<self-init>
<script>
# This is executed in the __jsN namespace of the joystick and
# access to the current PropertyList file is through the config
# variable.

(func { #temporary namespace

var handle_brake_script = func(value, name) {
	return (find("(", value)+1) ? compile(value, name) : compile(value, name)();
};

var common_modes = {
	"Throttle L/R (2 Engines)": ["throttle[0]",   "throttle[1]"],
	"Throttle L/R (3 Engines)": [["throttle[0]", "average2"], ["throttle[2]", "average2"]],
	"Throttle L/R (4 Engines)": ["throttle[0,1]", "throttle[2,3]"],
	"Throttle / Spoilers":      ["throttle", "spoilers"],
	"Throttle / Speedbrake":    ["throttle", "speedbrake"],
	"Throttle / Pitch":         ["throttle", "propeller_pitch"],
	"Throttle / Mixture":       ["throttle", "mixture"],
	"Throttle / Flaps":         ["throttle", "flaps"],
	"Throttle / Brakes":        ["throttle", "brake-cmd"],
	"Throttle":                 ["throttle", "brake-cmd"],
	"Collective":               [["throttle", -1], "brake-cmd"],
};

foreach (var ac_def; config.getChildren("aircraft")) {
	var found = -1;
	if (ac_def.getNode("fdm") != nil) {
		var found = 0;
		foreach (var fdmN; ac_def.getChildren("fdm"))
			if (fdmN.getValue() == ac_fdm) {found = 1; break}
	} if (found != 1 and ac_def.getNode("path") != nil) {
		var found = 0;
		foreach (var pathN; ac_def.getChildren("path"))
			if (pathN.getValue() == ac_path) {found = 1; break}
	} if (found != 1 and ac_def.getNode("model") != nil) {
		var found = 0;
		foreach (var modelN; ac_def.getChildren("model"))
			if (modelN.getValue() == ac_model) {found = 1; break}
	} if (found != 1 and ac_def.getNode("name") != nil) {
		var found = 0;
		foreach (var nameN; ac_def.getChildren("name"))
			if (nameN.getValue() == ac_name) {found = 1; break}
	}
	if (!found) continue;
	foreach (mode; var mode; ac_def.getChildren("mode")) {
		if (mode.getValue() != nil) {
			if (!contains(common_modes, mode.getValue()))
				print("Joystick initialization error: mode name "~mode.getValue()~" does not exist.");
			else call(addmode, [mode.getValue()]~common_modes[mode.getValue()]);
			continue mode;
		}
		# Copy this directly to the property tree
		var idx = Joystick.getNode("mode") != nil ? Joystick.getChildren("mode")[-1].getIndex()+1 : 0;
		props.copy(mode, Joystick.getChild("mode", idx, 1), 1); #1: copy attributes
	}
	if (ac_def.getNode("brakes") != nil) {
		if (ac_def.getNode("brakes/up[0]") != nil)
			brakes.up[0] = handle_brake_script(ac_def.getNode("brakes/up[0]").getValue(), "brake.up[0] script");
		if (ac_def.getNode("brakes/up[1]") != nil)
			brakes.up[1] = handle_brake_script(ac_def.getNode("brakes/up[1]").getValue(), "brake.up[1] script");
		if (ac_def.getNode("brakes/up[2]") != nil)
			brakes.up[2] = handle_brake_script(ac_def.getNode("brakes/up[2]").getValue(), "brake.up[2] script");
		if (ac_def.getNode("brakes/down[0]") != nil)
			brakes.down[0] = handle_brake_script(ac_def.getNode("brakes/down[0]").getValue(), "brake.down[0] script");
		if (ac_def.getNode("brakes/down[1]") != nil)
			brakes.down[1] = handle_brake_script(ac_def.getNode("brakes/down[1]").getValue(), "brake.down[1] script");
		if (ac_def.getNode("brakes/down[2]") != nil)
			brakes.down[2] = handle_brake_script(ac_def.getNode("brakes/down[2]").getValue(), "brake.down[2] script");
	}
	if (ac_def.getNode("control-desc") != nil) {
		control_function.active = 0; #default to non-active
		var desc = ac_def.getNode("control-desc").getValue();
		desc = split(";", desc);
		foreach (var ctrl; desc) {
			ctrl = string.replace(string.replace(string.replace(ctrl, "\t", ""), "\n", ""), " ", "");
			#ctrl = string.trim(ctrl);
			printlog("debug", "Desc_str: '"~ctrl~"'");
			var path = nil;
			var list = [nil,nil,nil,nil];
			if (find("@", ctrl) != -1) {
				printlog("debug", ".. Found path indentifier");
				var i = (var f = find("@", ctrl))+1;
				while (i &lt; size(ctrl) and (string.isalnum(ctrl[i]) or ctrl[i] == `/` or
				       ctrl[i] == `.` or ctrl[i] == `_` or ctrl[i] == `-` or ctrl[i] == `,`)) {
					i += 1;
				}
				var path = substr(ctrl, f+1,i-f-1);
				path = string.trim(path);
				printlog("debug", "... was '"~path~"'");
				if (i &lt; size(ctrl) and ctrl[i] == `(`) {
					printlog("debug", ".. Found type descriptor");
					var start = i+=1;
					while (ctrl[i] != `)`)
						i+=1;
					var type = substr(ctrl, start, i-start);
					printlog("debug", "... was '"~type~"'");
					props.globals.initNode(path, 0, type);
				}
				ctrl = string.trim(substr(ctrl, 0, f));
				printlog("debug", ".. Control is now '"~ctrl~"'");
			}
			if (find("&amp;", ctrl) != -1) {
				printlog("debug", ".. Found accessor functions");
				var i = (var f = find("&amp;", ctrl))+1;
				if (ctrl[i]  != `{`) die();
				if (ctrl[-1] != `}`) die();
				var level = 1;
				i += 1;
				while (level) {
					if (ctrl[i] == `{`) level += 1;
					elsif (ctrl[i] == `}`) level -= 1;
					i += 1;
				}
				var list = substr(ctrl, f+2,i-f-3);
				printlog("debug", "... List is '"~list~"'");
				list = split(",", list);
				forindex (var i; list)
					if (list[i]) list[i] = compile(list[i])();
				ctrl = string.trim(substr(ctrl, 0, f));
				printlog("debug", ".. Control is now '"~ctrl~"'");
			}
			(var indices,ctrl) = read_indices(ctrl)[:];
			if (contains(control_functions, ctrl)) {
				var ctrl = control_functions[ctrl];
				ctrl.active = 1;
				if (size(indices)) ctrl.indices = indices;
				if (path) ctrl.prop = path;
				if (typeof(list[0]) == 'func') ctrl.setter = list[0];
				if (typeof(list[1]) == 'func') ctrl.getter = list[1];
				if (typeof(list[2]) == 'func') ctrl.stepper = list[2];
				if (typeof(list[3]) == 'func') ctrl.toggler = list[3];
			} else print("Unkown control_function: '"~ctrl~"'");
		}
	} else {
		# By default, an aircraft is assumed to have all possible functions.
		# Provide a way to disable a function via a "no-"{function name} node
		# set to 'true'.
		foreach (var name; keys(control_functions)) {
			var XML_name = string.Nasal_to_XML(name);
			if (isa(control_functions[name], control_function)) {
				foreach (var node_name; ["no-"~XML_name, "non-"~XML_name, "no-"~name, "non-"~name]) {
					if (ac_def.getNode(node_name) != nil) {
						if (ac_def.getNode(node_name).getValue()) {
							# Disable this control
							control_functions[name].active = 0;
							break;
						}
					} else {
						node_name ~= "s";
						if (ac_def.getNode(node_name) != nil) {
							if (ac_def.getNode(node_name).getValue()) {
								control_functions[name].active = 0;
								break;
							}
						}
					}
				}
			} elsif (typeof(control_functions[name]) == 'scalar' and ac_def.getNode(XML_name) != nil)
				control_functions[name] = ac_def.getNode(XML_name).getValue();
		}
		if (ac_def.getNode("swap-spoilers-and-speedbrake") != nil and ac_def.getNode("swap-spoilers-and-speedbrake").getValue() or
			ac_def.getNode("swap-speedbrake-and-spoilers") != nil and ac_def.getNode("swap-speedbrake-and-spoilers").getValue())
			(control_functions.spoilers, control_functions.speedbrake) = (control_functions.speedbrake, control_functions.spoilers);
	}
	foreach (var name; keys(control_functions)) {
		if (getprop("/sim/"~name~"/setting") == nil) continue;
		(func {
		var name = caller(1)[0].name; # FIXME: why do we need this? Shouldn't just 'name' work?
		control_functions[name].active = 1;
		var settings = props.globals.getNode("/sim/"~name).getChildren("setting");
		control_functions[name].clipto = func(val) {
			# Stepped flaps movement:
			var last_setting = getprop(me.prop);
			var last_value = 0;
			foreach (var set; settings) {
				var setting = set.getValue();
				if (val &gt;= setting) {
					var last_value = setting;
				} else return
					(val2 &lt; (last_value + setting) / 2)
					? last_value : setting;
			}
		};
		})();
	}
	if (ac_def.getNode("script") != nil)
		call(compile(ac_def.getNode("script").getValue(), ac_def.getPath()~"/script"), [ac_def], nil, caller()[0]);
	if (found != -1) break;
}
})();
</script>
</self-init>

<!-- ======================================== BOMBERS! AND LARGE GROUND-ATTACK ======================================== -->

<aircraft>
	<name>b36d</name> <!-- Consolidated B36 D Peacemaker -->

	<mode>
		<name>Throttle L/R (10 engines)</name>
		<throttle>
			<function>throttle[0-4]</function>
		</throttle>
		<throttle>
			<function>throttle[5-9]</function>
		</throttle>
	</mode>
	<mode>
		<name>Piston / Jet Throttle</name>
		<throttle>
			<function>throttle[2-7]</function>
		</throttle>
		<throttle>
			<function>throttle[0,1,8,9]</function>
		</throttle>
	</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>b29</name> <!-- Boeing B-29 Superfortress -->

	<mode>Throttle L/R (4 engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>a26</name> <!-- A 26 Invader -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>AC-130</name> <!-- AC-130 -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>ant20</name> <!-- Tupolev ANT 20 Maxime Gorky -->

	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>lancaster</name> <!-- Avro Lancaster -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>B-1B</name> <!-- Rockwell B-1B Lancer -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
	</brakes>
	<control-desc>
		main; throttle[0-1];
		spoilers; retractable_gear; flaps;
		sweep @ /controls/flight/wing-sweep &amp; {controls.wingSweep}
	</control-desc>
</aircraft>
<aircraft>
	<name>b2-spirit</name> <!-- Northrop B-2 Spirit -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
	</brakes>
</aircraft>
<aircraft>
	<name>b25</name> <!-- B-25 Mitchell -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>B-52F</name> <!-- Boeing B-52 F in Arclight colour scheme -->

	<mode>
		<name>Throttle L/R (8 Engines)</name>
		<throttle>
			<function>throttle[0,1,2,3]</function>
		</throttle>
		<throttle>
			<function>throttle[4,5,6,7]</function>
		</throttle>
	</mode>
	<mode>
		<name>Throttle / Steering</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>
				setprop("/controls/gear/steering-front-norm", -arg[0]);
				if (allow_popupTips) gui.popupTip("Steering-deg: "~sprintf("%+2f", arg[0]*-53));
			</function>
			<min>-1</min>
			<max>1</max>
		</throttle>
		<switch-to>
			<script>setlocalprop("axis[4]/settings/dead-band", 0.3)</script>
		</switch-to>
		<switch-from>
			<script>setlocalprop("axis[4]/settings/dead-band", 0); setprop("/controls/gear/steering-front-norm", 0)</script>
		</switch-from>
	</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>BAC-TSR2</name> <!-- BAC TSR2 Prototype -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== AIRLINERS ======================================== -->

<aircraft>
	<name>707</name> <!-- Boeing 707 -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>boeing747-400-jw</name> <!-- Boeing 747-400 -->
	<name>747-400</name> <!-- Boeing 747-400 -->

	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>717-200</name> <!-- Boeing 717-200 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>737-100</name> <!-- Boeing 737-100 -->
	<name>737-200</name> <!-- Boeing 737-200 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>777-200</name> <!-- Boeing 777-200 -->
	<name>777-200ER</name> <!-- Boeing 777-200ER -->
	<name>777-200LR</name> <!-- Boeing 777-200LR -->
	<name>777-300</name> <!-- Boeing 777-200 -->
	<name>777-300ER</name> <!-- Boeing 777-200ER -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>
			controls.toggleAutoSpoilers();
			if (allow_popupTips) gui.popupTip("Spoilers "~["RETRACTED", "on AUTO"][getprop("/controls/flight/speedbrake-lever")]);
		</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>787</name> <!-- Boeing 787-8 -->
	<name>CRJ-200</name> <!-- Bombardier CRJ-200 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>
		<name>Throttle / Spoilers</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>
				var last = getprop("/controls/flight/spoiler");
				if (arg[0] &lt; 0.25)
					setprop("/controls/flight/spoiler", 0);
				elsif (arg[0] &lt; 0.5)
					setprop("/controls/flight/spoiler", 1);
				elsif (arg[0] &lt; 0.75)
					setprop("/controls/flight/spoiler", 2);
				else
					setprop("/controls/flight/spoiler", 3);
				if (last != getprop("/controls/flight/spoiler") and allow_popupTips)
					gui.popupTip("Spoilers set to "~["NONE", "AUTO", "AUTO or 2/3", "FULL"][getprop("/controls/flight/spoiler")]);
			</function>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>
			if (getprop("/controls/flight/spoiler") &gt; 0)
				setprop("/controls/flight/spoiler", getprop("/controls/flight/spoiler")-1);
			if (allow_popupTips) gui.popupTip("Spoilers set to "~["NONE", "AUTO", "AUTO or 2/3", "FULL"][getprop("/controls/flight/spoiler")]);
		</up>
		<up>
			if (getprop("/controls/flight/spoiler") &lt; 3)
				setprop("/controls/flight/spoiler", getprop("/controls/flight/spoiler")+1);
			if (allow_popupTips) gui.popupTip("Spoilers set to "~["NONE", "AUTO", "AUTO or 2/3", "FULL"][getprop("/controls/flight/spoiler")]);
		</up>
		<up>reversethrust.togglereverser</up>
	</brakes>
	<control-desc>
		main; throttle[0-1];
		retractable_gear; flaps;
		spoilers @ /controls/flight/spoiler (INT);
		thrust_reverser &amp; { , , , reversethrust.togglereverser}
	</control-desc>
	<no-tailhook type="bool">true</no-tailhook>
	<script>
		props.globals.initNode("/controls/flight/spoiler", 0, "INT"); #bug, the 787 doesn't initalize this as of FG v.2.6
	</script>
</aircraft>
<aircraft>
	<name>727-230</name> <!-- Boeing 727-230 -->
	<name>L-1011-500</name> <!-- Lockheed L-1011-500 TriStar -->

	<mode>Throttle L/R (3 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== TRANSPORT ======================================== -->

<aircraft>
	<name>Albatross</name> <!-- Grumman Albatross -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>trimotor</name>

	<mode>Throttle L/R (3 Engines)</mode>
	<mode>Throttle / Brakes</mode>
	<control-desc>
		main; throttle[0-3];
	</control-desc>
</aircraft>
<aircraft>
	<name>AN-225</name> <!-- Antonov AN-225 heavy/outsize cargo aircraft -->

	<mode>
		<name>Throttle L/R (6 engines)</name>
		<throttle>
			<function>throttle[0,1,2]</function>
		</throttle>
		<throttle>
			<function>throttle[3,4,5]</function>
		</throttle>
	</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<down n="1">setprop("/controls/flight/spoilers", 1)</down>
		<up>setprop("/controls/flight/spoilers", 0)</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== REGIONAL/COMMERICAL TURBOPROPS ======================================== -->

<aircraft>
	<name>ATR-72-500</name> <!-- ATR-72-500 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>c160</name> <!-- C 160 Transall -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== FIGHTER/ATTACK ======================================== -->

<aircraft>
	<name>SU-37</name> <!-- Sukhoi SU-37 type aircraft -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>
		<name>Throttle / Flaps &amp; Slats</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>flaps</function>
			<function>slats</function>
			<min n="1">4</min>
			<max n="1">0</max>
			<function>/controls/flight/elevator-trim</function>
			<min n="2">-0.1</min>
			<max n="2">0</max>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<control-desc>
		main; throttle[0-1];
		flaps; slats; retractable_gear;
		speedbrake @ /controls/flight/spoilers
	</control-desc>
	<script>
		# Set afterburners to 'AUTO' (not always on, but able to be on)
		setprop("/controls/engines/engine[0]/reheat", 1);
		setprop("/controls/engines/engine[1]/reheat", 1);
	</script>
</aircraft>
<aircraft>
	<name>MiG-15bis</name> <!-- MiG-15bis -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<control-desc>
		main; throttle[0]; flaps;
		retractable_gear @ /fdm/jsbsim/systems/gearcontrol/control-input;
		speedbrake @ /fdm/jsbsim/systems/speedbrakescontrol/control-input
	</control-desc>
	<script>
		control_functions.throttle.isActive = func {
			!getprop("processes/autostart/enabled") or getprop("processes/autostart/pos") &gt;= 42;
		};
		control_functions.retractable_gear.stepper = nil;
	</script>
</aircraft>
<aircraft>
	<name>F-22-Raptor</name> <!-- F-22 Raptor -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>
		<name>Throttle / Flaps &amp; Slats</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>flaps</function>
			<function>slats</function>
			<min n="1">4</min>
			<max n="1">0</max>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>FA-18</name> <!-- F/A-18 Hornet -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
</aircraft>
<aircraft>
	<name>A-6E</name> <!-- Grumman A-6E -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<up>brakes.spoilers</up>
	</brakes>
	<script>
		# A hack to allow the stepped flaps to work properly :-)
		setprop("/sim/flaps/setting[0]", 0);
		setprop("/sim/flaps/setting[1]", 0.75);
		setprop("/sim/flaps/setting[2]", 1);
	</script>
</aircraft>
<aircraft>
	<name>A-10</name> <!-- Fairchild A-10 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.spoilers</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<fdm>f-14a</fdm> <!-- Grumman F-14a (JSBSim) -->

	<mode>Throttle L/R (2 Engines)</mode>
	<!--<mode>
		<name>Throttle / DLC</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>DLC</function>
			<min>1</min>
			<max>0</max>
		</throttle>
	</mode>-->
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<up>
			f14.set_sweep(0);
		</up>
	</brakes>
	<script>
		control_functions.flaps.prop = "/controls/flight/flapscommand";
		#control_functions.DLC.prop = "/controls/flight/DLC";
		#control_functions.DLC.isActive = func() {
		#	return !!getprop("/controls/flight/DLC-engaged");
		#};
		control_functions.sweep.prop = "/fdm/jsbsim/fcs/wing-sweep-cmd";
		control_functions.sweep.stepper = f14.move_wing_sweep;
	</script>
</aircraft>
<aircraft>
	<fdm>f-14b-yasim</fdm> <!-- Grumman F-14b (YASim) -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>
		<name>Throttle / DLC</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>DLC</function>
			<min>1</min>
			<max>0</max>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<up>
			var DLC = getprop("/controls/flight/DLC");
			setprop("/controls/flight/DLC", !DLC);
			DLC = getprop("/controls/flight/DLC");
			if (allow_popupTips) gui.popupTip(sprintf("DLC at %s", ["Zero","Full"][DLC]));
		</up>
	</brakes>
	<script>
		control_functions.flaps.prop = "/controls/flight/flapscommand";
		control_functions.DLC.prop = "/controls/flight/DLC";
		control_functions.DLC.isActive = func() {
			return !!getprop("/controls/flight/DLC-engaged");
		};
	</script>
</aircraft>
<aircraft>
	<name>f16</name> <!-- General Dynamics F-16 -->

	<mode>
		<name>Throttle / Brakes &amp; Speedbrake</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>brake-cmd</function>
			<function>/controls/flight/speedbrake</function>
			<min n="1">bool</min>
			<max n="1">-0.3</max>
		</throttle>
	</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<no-flaps type="bool">1</no-flaps>
</aircraft>
<aircraft>
	<name>f16afti</name>

	<mode>Throttle / Flaps</mode>
	<mode>
		<name>Throttle / Brakes &amp; Speedbrake</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>brake-cmd</function>
			<function>/controls/flight/speedbrake</function>
			<min n="1">bool</min>
			<max n="1">-0.3</max>
		</throttle>
	</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
</aircraft>
<aircraft>
	<name>RafaleB17</name> <!-- Dassault Rafale B Escadron de chasse 1/7 provence -->
	<name>RafaleT08</name> <!-- Dassault Rafale B Tigermeet 2008 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>a4f</name> <!-- Douglas A4F Skyhawk -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Spoilers</mode>
	<mode>Throttle / Speedbrake</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<up>brakes.spoilers</up>
	</brakes>
</aircraft>
<aircraft>
	<name>FA-XX</name> <!-- Boeing F/A-XX -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>buccaneer</name> <!-- Blackburn Buccaneer S2 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>
		<name>Throttle / Flaps &amp; Aileron Droop</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>flaps</function>
			<function>aileron-droop</function>
			<min n="1">1</min>
			<max n="1">0</max>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
</aircraft>

<!-- ======================================== MIL. PROPS ======================================== -->

<aircraft>
	<name>f7f</name> <!-- Grumman F7F Tigercat -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>PC-9M</name> <!-- Pilatus PC-9M -->
	<name>PC-21</name> <!-- Pilatus PC-21 -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>AD-6</name> <!-- Douglas AD-6 Skyraider -->

	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<down n="2">
			setprop("/fdm/jsbsim/systems/armament/release", 1)
		</down>
		<up n="2">
			setprop("/fdm/jsbsim/systems/armament/release", 0)
		</up>
	</brakes>
</aircraft>
<aircraft>
	<name>a6m2-anim</name> <!-- A6M2 Zero -->
	<name>val</name> <!-- Aichi D3A -->

	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
</aircraft>
<aircraft>
	<name>Beaufighter</name> <!-- Beaufighter -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
</aircraft>

<!-- ======================================== G-AVIATION ======================================== -->

<aircraft>
	<name>pa24-250-CIII</name> <!-- Piper Commanche 250, CIII autopilot -->
	<name>pa24-250-CIIB</name> <!-- Piper Commanche 250, CIIB autopilot -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>a24</name> <!-- Aeroprakt A 24 Viking -->

	<mode>Throttle / Flaps</mode>
	<mode>
		<name>Throttle / Gear</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>retractable_gear</function>
			<min>-bool</min>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>aerostar</name> <!-- Aerostar Super 700 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>AG-14</name> <!-- Anderson-Greenwood AG-14 -->
	<name>an2</name> <!-- Legendary Russian AN-2 -->
	<name>arup-s2</name> <!-- Arup S2 -->

	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>allegroF</name> <!-- Allegro 2000 (Float) -->

	<mode>Throttle / Flaps</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>allegroW</name> <!-- Allegro 2000 (Wheels) -->
	<name>katana</name> <!-- Diamond DA 20 Katana -->

	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>B1900D</name> <!-- Beechcraft b1900d -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>model17</name> <!-- Beechcraft Staggerwing -->

	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>hv220</name> <!-- Bernard HV 220 -->

	<mode>Throttle</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>bugatti</name> <!-- Bugatti model 100P -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>bv151</name> <!-- Blohm und Voss BV141 -->

	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>bv170</name> <!-- Blohm und Voss BV170 -->

	<mode>Throttle L/R (3 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>cl415</name> <!-- Bombardier 415 -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>c172p</name> <!-- Cessna 172P Skyhawk (1981 model) -->
	<name>pa28-161</name> <!-- Piper Cherokee Warrior II (1979 model) -->

	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up n="1">
			setprop("/controls/lighting/landing-lights", var v = !getprop("/controls/lighting/landing-lights"));
			if (allow_popupTips) gui.popupTip("Landing light "~v?"on":"off");
		</up>
	</brakes>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
	<script>
		control_functions.starter.prop = "/controls/switches/starter";
		controls.startEngine = func(s=1) {
			setprop("/controls/switches/starter", s);
		};
	</script>
</aircraft>

<!-- ======================================== TRAINERS/AEROBATIC JETS ======================================== -->

<aircraft>
	<name>l39</name> <!-- Aero Vodochody L-39 Albatros -->

	<mode>Throttle / Flaps</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>alphajet</name> <!-- Dassault/Dornier Alphajet -->

	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle / Flaps</mode>
	<mode>
		<name>Throttle / Smoke</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>/sim/multiplay/generic/int[6]</function>
			<min>bool</min>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== AEROBATIC PROPS ======================================== -->

<aircraft>
	<name>ZivkoEdge540</name> <!-- Zivko Edge 540 -->

	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Brakes</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== ULTRALIGHT/(HANG-)GLIDERS ======================================== -->

<aircraft>
	<name>Dragonfly</name> <!-- Moyes Dragonfly -->

	<mode>Throttle / Brakes</mode>
	<brakes>
		<down>setprop("/controls/engines/engine/starter", 1)</down>
		<up>setprop("/controls/engines/engine/starter", 0)</up>
	</brakes>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>ask13</name> <!-- Schleicher ASK 13 Glider -->

	<mode>
		<name>Speedbrake / Brakes</name>
		<throttle>
			<function>throttle</function>
			<min>1</min>
			<max>0</max>
		</throttle>
		<throttle>
			<function>brakes</function>
		</throttle>
	</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>ask21</name> <!-- Schleicher ASK 21 Glider -->

	<mode>
		<name>Speedbrake / Brakes</name>
		<throttle>
			<function>throttle</function>
			<min>0</min>
			<max>1</max>
		</throttle>
		<throttle>
			<function>brakes</function>
		</throttle>
	</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>ask21mi</name> <!-- Schleicher ASK 21 mi -->

	<mode>
		<name>Throttle / SLS Unit &amp; Starter</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>
				var starter = arg[0] &gt; 0.85;
				var SLS = arg[0] &gt; 0.2;
				setprop("/controls/engines/engine/starter", starter);
				if (doors.doorsystem.passenger.target == SLS)
					doors.doorsystem.passengerexport();
			</function>
		</throttle>
	</mode>
	<mode>
		<name>Speedbrake / Brakes</name>
		<throttle>
			<function>/controls/flight/spoilers</function>
			<min>1</min>
			<max>0</max>
		</throttle>
		<throttle>
			<function>brake-cmd</function>
		</throttle>
	</mode>
	<control-desc>
		main; throttle[0]; starter
	</control-desc>
</aircraft>
<aircraft>
	<name>JT-5B</name> <!-- JT-5B Autogyro -->

	<mode>
		<name>Throttle / Composite (Rotorbrake | none | Starter)</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>
				var starter = arg[0] &gt; 0.85;
				var brake = arg[0] &gt; 0.2 or in_air() ? 0 : (0.2-arg[0])/0.2;
				setprop("/controls/engines/engine/starter", starter);
				setprop("/controls/rotor/brake", brake);
			</function>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<control-desc>
		main; throttle[0]; starter
	</control-desc>
</aircraft>

<!-- ======================================== HISTORICAL ======================================== -->

<aircraft>
	<name>14bis</name> <!-- 14bis Santos DUMONT -->
	<name>21</name> <!-- Santos Dumont N 21 Demoiselle -->

	<mode>
		<name>Throttle / Starter</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>/controls/engines/engine/starter</function>
			<function>bool</function>
		</throttle>
	</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-tailhook type="bool">true</no-tailhook>
	<no-flaps type="bool">true</no-flaps>
</aircraft>

<!-- ======================================== VTOL ======================================== -->

<aircraft>
	<name>harrier</name> <!-- British Aerospace Harrier -->

	<mode>
		<name>Throttle / Vector</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>mixture</function>
		</throttle>
	</mode>
	<mode>Throttle / Flaps</mode>
	<mode>
		<name>Throttle / Vector &amp; Flaps</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>mixture</function>
			<function>flaps</function>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<swap-spoilers-and-speedbrake type="bool">true</swap-spoilers-and-speedbrake>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>f35</name>   <!-- Lockheed Martin F-35B Lightning II -->
	<name>F-35B</name> <!-- Lockheed Martin F-35B Lightning II -->

	<mode>
		<name>Throttle / Vector</name>
		<throttle>
			<function>throttle</function>
		</throttle>
		<throttle>
			<function>f35.tiltAxis</function>
			<min>0.8</min>
		</throttle>
	</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
	</brakes>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>v22</name> <!-- Bell Boeing V-22 Osprey -->

	<mode>
		<name>Throttle / Engines</name>
		<throttle>
			<function>throttle</function>
			<min>1</min>
			<max>0</max>
		</throttle>
		<throttle>
			<function>v22.tiltAxis</function>
		</throttle>
	</mode>
		<name>Throttle / Engines</name>
		<throttle>
			<function>throttle</function>
			<min>1</min>
			<max>0</max>
		</throttle>
		<throttle>
			<function>brake-cmd</function>
		</throttle>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- ======================================== HELIS ======================================== -->

<aircraft>
	<name>H21-piasecki</name> <!-- Piasecki_H-21C_Helicopter -->
	<name>CH47</name> <!-- CH-47 Chinook -->
	<name>aircrane</name> <!-- AirCrane -->
	<name>uh1</name> <!-- Bell UH 1 "Huey" -->
	<name>uh60</name> <!-- Sikorsky UH60 BlackHawk -->
	<name>R22</name> <!-- Robinson R22 Beta II -->
	<name>Lynx-WG13</name> <!-- Lynx-WG13_Helicopter -->
	<name>superfrelon</name> <!-- Super Frelon -->
	<name>Alouette-III</name> <!-- Alouette_III_Helicopter -->
	<name>raven</name> <!-- Robinson R44 Raven II / Clipper -->
	<name>S51-sikorsky</name> <!-- Sikorsky-S51_Helicopter -->

	<mode>Collective</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>ka50</name> <!-- Kamov KA 50 Black Shark -->
	<name>dauphin</name> <!-- Dauphin -->
	<name>ch53e</name> <!-- Sikorsky CH-53E Super Stallion -->
	<name>bell222x</name> <!-- Bell 222 X -->
	<name>mi24</name> <!-- Mil Mi 24 Hind -->

	<mode>Collective</mode>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>
<aircraft>
	<name>bo105</name> <!-- Eurocopter Bo105 -->

	<mode>
		<name>Throttle &amp; Power</name>
		<throttle>
			<function>throttle</function>
			<min>1</min>
			<max>0</max>
		</throttle>
		<throttle>
			<function>
				debug.dump(bo105.engines);
				# Raw Access:
				setprop("/controls/engines/engine[0]/power", bo105.engines.engine[0].power=arg[0]);
				setprop("/controls/engines/engine[1]/power", bo105.engines.engine[1].power=arg[0]);
			</function>
		</throttle>
	</mode>
	<non-retractable-gear type="bool">true</non-retractable-gear>
	<no-flaps type="bool">true</no-flaps>
	<no-tailhook type="bool">true</no-tailhook>
</aircraft>

<!-- Default -->
<aircraft>
	<mode>Throttle / Pitch</mode>
	<mode>Throttle / Mixture</mode>
	<mode>Throttle / Flaps</mode>
	<mode>Throttle L/R (2 Engines)</mode>
	<mode>Throttle L/R (3 Engines)</mode>
	<mode>Throttle L/R (4 Engines)</mode>
	<mode>Collective</mode>
	<mode>Throttle / Brakes</mode>
	<brakes>
		<up>brakes.speedbrake</up>
		<up>brakes.spoilers</up>
		<up>brakes.thrust_reverser</up>
	</brakes>
</aircraft>

</PropertyList>

